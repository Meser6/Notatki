--------------- GIT ---------------

W Gicie są 3 przestrzenie robocze:
    - Working tree - tu znajdują się pliki które nie są śledzone, sledzone ale ze zmianami nie
              zaakceptowanymi do commita
    - Index - tu są wszytskie pliki ktore sa gotowe do commitu
              jeśli plik jest dodany (git add) ale wprowadzimy w nim zmiany to wersja ze zmianami bedzie
              w working tree a bez w index
    - Local repository - tu sa plki spakowane w commity

---------------------------------------------------------------------
------------------------------ KOMENDY ------------------------------
---------------------------------------------------------------------

git stash - dodaje pliki ktore sa w rosking tree jako paczka (ktora mozemy potem sobie pobrac)

--------------- INFORMACJE ---------------

git status - pokazuje aktualny status naszego repozytorium
          <sciezka do folderu> - pokaze status plików tylko z danego folderu
          > np.     git status src/main/Java/GIT - pokaze status plikow z folderu GIT

git diff - pokazuje roznice w plikach pomiedzy working tree a indexem
        --staged - roznica w plikach pomiedzy idexem a local repozitory
        <commit_number> - pomiedzy working tree a danym commitem
        HEAD - pomiedzy working tree a headem
        <nazwa_pliku> - pokazuje roznice tylko w tym pliku/plikach
        > np.     git diff HEAD File2.js - pokaze roznice w pliku File2 pomiedzy working tree a headem

git show - pokazuje informacje o niepushnietych commitach

git log - pokazuje liste pushnietych commitow (z OBECNEJ gałęzi)
        --graph - pokazuje drzewo z rozgałęzieniami (z OBECNEJ gałęzi)
        --graph --oneline - pokazuje drzewo z rozgalezieniami ale w skróconej wersji (z OBECNEJ gałęzi)
        --all  - pokazuje coś z wszystkich gałęzi
        > np.     git log --graph --oneline --all - pokaze drzewko ze wszystkich commitów

git reflog - pokazuje wszystko to bylo robione na naszym gitowym repo

--------------- DODAWANIE/USUWANIE PLIKU ---------------

git add <nazwa pliku> - dodaje plik/aktualna wersje do indexu
        . - wszystkie pliki
        Mys* - wszystkie pliki zaczynajace sie na Mys
        folder1/folder2/* - wszystkie pliki które znajdują się w folder1 > folder2
        File1.txt File2.txt - doda te dwa pliki (TAB wypelnia nazwy plikow)
        > np.    git add folder1/Mys* - doda wsyztkie pliki zaczynajace sie na Mys z folder1

git add -p <ściezka do pliku> - pozwoli wybrac konkretne linijki ktore zostana dodane do indexu
        //TODO rozkminic potem jak to sie robi. e to edycja ? to pomoc

git commit -m "nazwa commita" - z plików które sa w indexie tworzy commit o podanej nazwie

git reset <sciezka do pliku> - podmienia plil w idexie na ten z najnowszej rewizji (head)

git checkout <commit_number> <sciezka do pliku>  - zastepuje plik w idexie i working tree plikiem z danego commita
        > np.   git checkout c4ds folder1/Pli.txt - podmieni Pli.txt na wersje z commita c4ds...

--------------- ZDALNE REPO ---------------

orgin jest to jakby flaga/informacja ze tyczy sie to zdalnego repo np. orgin/master

    git remote -v - pokazuje na jaki link bedziemy pushowac, i z jakiego linkui fetchowac nasze repo
    git branch -r - pokazuje liste branchy na zdalnym repo i na jakim branchu jest head

    git push - wysyla wsyztskie zmiany na sledzonych branchach
            <nazwa repo> <nazwa brancha> - pushuje tylko danego brancha na dane repo
            >np.   git push orgin xd - wysle brancha xd na repo
            <nazwa repo> <nazwa galezi> - gdy pierwszy raz wypychamy naszego brancha na repo
            >np.    git push orgin xd -  wysle branch xd na repo zdalne i nazwie go orgin/xd
    git featch - pobiera info o zmianach na sledzonych branchach
            <nazwa repo> <nazwa brancha> - sprawdza tylko danego brancha na dane repo
    git pull - pobiera zmiiany na sledzonych branchach
            <nazwa repo> <nazwa brancha> - pobiera tylko danego brancha na dane repo

    git checkout -b <lokalna nazwa brancha> <nazwa zdalnego brancha> - swtorzy brancha <lokalna nazwa brancha>,
        domerguje do nego <nazwe zdalnego branza> i wlaczy jego sledzenie
            >np.    git checkout xd orgin/xd - dopisze zdalne xd do lokalnego xd i wlaczy sledznie
    git checkout -t <nazwa zdalnego brancha> - storzy brancha lokalnego o nazwie nazwa-orgin i zacznie go sledzic
            >np.    git checkout - t orgin/xd - utworzy brancha xd i zacznie go sledzic wzgledem orgin/xd
    git branch -u <nazwa zdalnego brancha>  <lokalna nazwa brancha> -  dopisze do <lokalna nazwa brancha> sledznie
        z <nazwa zdalnego brancha>
            >np.    git branch -u orgin/xd xd - dopisze xd do sledznia wzledem zdalnego xd
    git branch --unset-upstream <nazwa brancha> - usuwa branchowi lokalnemu sledzenie wzgledem repo


--------------- GIT IGNORE ---------------

touch .gitignore  - jeśli nie mamy stworzonego pliku .gitignore to nalezy go stworzyc ta komenda
do tego pliku nalezy wpisasc wszytkie pliki które chcemy zignorować
WAŻNE! będzie ignorował tylko pliki które sa w Working tree.
jesli chemy ignorowac pliki z idexu nalezy je najpierw z niego usunac

    output.dll - pojedynczy plik
    *.dll - wszsystkie pliki z rozszerzeniem .dll
    /src/main/java/GIT - wszystkie pliki z folderu GIT


--------------- KONFIGURACJA ---------------

        --global - ustawienia dla danego uzytkownika
        --system - ustawienia dla calego komputera
        --local  - ustawienia dla danego projektu (repo)

    git config <zakres> user.name "<nazwa>"" - ustawia w danym zakresie dana nazwe uzytkownika
    git config <zakres> user.email "<mail> - ustawia w danym zakresie dany email uzytkownika

    git config user.name/email - wyswietli nazwe lub mail

    git config <zakres> alias.<nazwa> "<komenda> (bez git)" - dopisze komende do nazwy przez co latwiej ja wyolaby
        > np.     git config --global alias.iguana "add *" - doda  globalnie komende add * do zmiennej add
        >         git iguana - /\ wywoła powyższa komende
