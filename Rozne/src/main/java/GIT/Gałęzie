--------------- OBSLUGA GALEZI ---------------

Wskaznik head to ten na ktorym obecnie jestesmy.
Może on wskazywac na brancha, albo na konkretny commit (lepiej zeby na brancha)
Jesli wskazuje na commit to w git status pojawi sie info "detached HEAD "

Wskaznik branch pokazuje na ostatni commit w danej galezi (jej czubek)

Jeżeli  wprowadzimy jakies zmiany a natepnie bedziemy chcieli przeskoczyc do
danego commita to te zmiany (o ile to mozliwe) będą widoczne commicie do ktorego przeskakujemy
Jeżeli przeniesienie zmian nie bedzie mozliwe to dostaniemy o tym info i przeskok na commit sie nie wykona
Jeżeli mimo to chemy przeskoczyc i straic zmiany to rzeba uzyc parametru --force (usunie zmiay w plikach ale nie pliki!)

    git checkout <identyfikator commita/nazwa brancha>  - przeskoczy do danego brancha i wyrowna pliki z nim
        --force (-f) - wymusza zmiane heada bez wzgledu na to czy zmiany w plikach da sie przeniesc (jesli sie nie da to usuanie)
        head~ - cofa sie o jeden commit w tyl wzgledem aktualnego heada
        master~3 - cofa sie o 3 commity wzgledem mastera
        >np.  git checkout -f master - przeniesie nas na mastera

gdy np piszemy cos na swoim branchu "XD" ale jednak nie chcemy zeby te zmiany wesly i  chcemys ie cofnac do ostatniego commita to
    git checkout -f XD - przeniesie nas do commita, usunie zmiany w plikach ale NIE nieśledzone, nowe pliki
    git clean -nd - sprawdza co nie zostalo usuniete z niesledzonych plikow
    git clean -fd - usuwa to to jest niesledzone

    git branch - wypisze wszystkie branche jakie byly w danym projekcie
               --list <czesc nazwy> - pokaze branche ktore sie zaczynaja od takich nazw
               >np.     git branch --list bug* - pokaze branche ktore zaczynaja sie na bug
               --merged <nazwa brancha> - pokaze wszystkie branche ktore sa domergowane do <nazwa brancha>
               --no-merged <nazwa brancha> - pokaze wszystkie branche ktore NIE sa domergowane do <nazwa brancha>
               -m <stara nazwa> <nowa nazwa> - zmienia nazwe brancha <stara nazwa> na <nowa nazwwa>
               -d <nazwa brancha> - usunie brancha ktory jest domergowany do obecnego heada. jesli nie bedzie rzuci blad
               -D <nazwa brancha> - usunie brancha. jesli nie jest domergowany to pliki z niego usuna sie po 30 dniach

    git reset <identyfikator commita> - wykonywac na commicie ktory ma byc uciety.przerzuci heada i czolowke brancha
        na dany commit. commity ktore sa potem zostana usuniete po 30 dniach. stosowac tylko na commitach ktore nie byly puschniete
                --hard - wyczysci working tree i idex
                --mixed - wyczycsci idex (domyslne)
                --soft - nic nie wyczysci, tylko przeniesie flagi
    git revert <numer commita najnowszego> <numer commita najstrszego> - odwróci zmiany wprowadzone w commitach
        z zakresu <najnowszy><najstarszy> i ZCOMMITUJE JE OD RAZU
                -n <numer commita najnowszego> <numer commita najstrszego> - nie zcommituje ich od razu tylko wejdzie na
                    tryb REVERTING
        git branch -lavv - pokaze wszystkie info o commitach. na niebiesko te ktore sa sledzone

----------------------------------------
--------------- GALEZIE  ---------------
----------------------------------------

--------------- Tworzenie ---------------

    git branch <nazwa_brancha> <identyfikator_comita> - tworzene nowej gałęzi. jesli nie podamy identyikatora to zrobi z heada
WAŻNE! jeśli chcemy zaczac pisac na nowym branchu to trzeba sie na niego przepiąć headem (git checkout <nazwa_brancha>)
Możemy to też zrobić w nastepujący sposob
    git checkout -b <nazwa_brancha> <identyfikator_comita> -tworzene nowej gałęzi i przełączenie sie na nia.
        >np. git checkout -b XD master~3 - storzy brancha XD z 3 commitra przed masterem i przelaczy sie na niego

--------------- Scalanie ---------------

Aby scalic jedna gałąź do drugiej musimy byc headem na tej gałęzi DO której chemy scalić inna (np. git checkout master)\
    git merge <nazwa brancha> - scali brancha <nazwa brancha> do tego  na ktorym obecnie jestesmy headem
        jeżeli bedzie mógł to scali go nie przez commit a po prostu przez przeniesienie flagi.

jesli chemy aby na pewno przeniósł go przez commit (zeby bylo to ladnie widoczne na grafie) to uzuwamy
    git merge --no-ff <nazwa brancha> - wymusi scalanie przez commit

--------------- Konflikty ---------------

Git sprobuje sam sie domyslic ktore pliki gdzie wgrac. jesli nie bedzie mogl tego zrbic to powstanie konflikt
a informacj o nim pojawi sie w terminalu. Wówczas dostaniemy info, ze jestesmy na <nazwa brancha? | MERGING
jest to specyficzny stan sluzacy tylko i wylacznie do obslugi konfliktow

    git merge --abort - anuluje merga gdy jest w trybie MERGING i wychodzi z niego

W przypadku konfliktu w plikach postana markery
    <<<<<<< HEAD (nazwa branacha do ktorego chcemy domergowac)
      zawartość pliku na tym brnchu
    =======
     zawartosc plku na branchu ktory chcemy domergowac
    >>>>>>> fix (nazwa brancha ktory chcemy domergowac)

Po rozwiązaniu konfliktu usuwamy markery, zapisujemy plik, dodajemy do indexu i piszemy komende
    git merge --continue - sprobuje domergowac jeszce raz. jak sie uda wyjdzie z trybu MERGING

W przypadku gdy np na 1 branchu zmienimy cos w pliku,a w a 2 rodzielimy ten plik na 2 inne to w trybie MERGING
bedą widoczne wszystkie 3 pliki.

--------------- Pull request ---------------
Przed zrobieniem commita ktory ma isc do pull request dobrze jest sie rebasowac z masterem

git checkout - przepiecie na mastera
git pull - pobranie obecnego
git checkout <nazwa brancha> - przepiecie na brancha
git rebase master - wyrownianie z masterem
git commim -m "text" - comit
git pull - puszczenie zmian
